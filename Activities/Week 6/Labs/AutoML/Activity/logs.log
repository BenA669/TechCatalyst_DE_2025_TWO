2025-08-08 16:02:55,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-08 16:02:55,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-08 16:02:55,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-08 16:02:55,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-08 16:03:15,808:INFO:PyCaret ClassificationExperiment
2025-08-08 16:03:15,808:INFO:Logging name: clf-default-name
2025-08-08 16:03:15,808:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-08 16:03:15,808:INFO:version 3.3.2
2025-08-08 16:03:15,808:INFO:Initializing setup()
2025-08-08 16:03:15,808:INFO:self.USI: ed1f
2025-08-08 16:03:15,808:INFO:self._variable_keys: {'X_train', 'n_jobs_param', 'logging_param', 'pipeline', 'seed', 'html_param', 'fold_shuffle_param', 'X_test', 'fold_groups_param', 'exp_id', 'y', 'y_train', '_ml_usecase', 'fix_imbalance', 'exp_name_log', 'gpu_n_jobs_param', 'X', 'fold_generator', 'is_multiclass', 'idx', 'data', 'log_plots_param', '_available_plots', 'gpu_param', 'target_param', 'memory', 'y_test', 'USI'}
2025-08-08 16:03:15,808:INFO:Checking environment
2025-08-08 16:03:15,808:INFO:python_version: 3.11.13
2025-08-08 16:03:15,809:INFO:python_build: ('main', 'Jul 11 2025 22:36:59')
2025-08-08 16:03:15,809:INFO:machine: AMD64
2025-08-08 16:03:15,809:INFO:platform: Windows-10-10.0.19045-SP0
2025-08-08 16:03:15,818:INFO:Memory: svmem(total=17111728128, available=3719098368, percent=78.3, used=13392629760, free=3719098368)
2025-08-08 16:03:15,818:INFO:Physical Core: 8
2025-08-08 16:03:15,818:INFO:Logical Core: 16
2025-08-08 16:03:15,818:INFO:Checking libraries
2025-08-08 16:03:15,818:INFO:System:
2025-08-08 16:03:15,818:INFO:    python: 3.11.13 (main, Jul 11 2025, 22:36:59) [MSC v.1944 64 bit (AMD64)]
2025-08-08 16:03:15,818:INFO:executable: c:\Users\Benja\Documents\Projects\techcat\py311\Scripts\python.exe
2025-08-08 16:03:15,818:INFO:   machine: Windows-10-10.0.19045-SP0
2025-08-08 16:03:15,819:INFO:PyCaret required dependencies:
2025-08-08 16:03:15,820:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
2025-08-08 16:03:15,820:WARNING:  warnings.warn(
2025-08-08 16:03:17,027:INFO:                 pip: Not installed
2025-08-08 16:03:17,027:INFO:          setuptools: 80.9.0
2025-08-08 16:03:17,027:INFO:             pycaret: 3.3.2
2025-08-08 16:03:17,027:INFO:             IPython: 9.4.0
2025-08-08 16:03:17,027:INFO:          ipywidgets: 8.1.7
2025-08-08 16:03:17,027:INFO:                tqdm: 4.67.1
2025-08-08 16:03:17,027:INFO:               numpy: 1.26.4
2025-08-08 16:03:17,027:INFO:              pandas: 2.1.4
2025-08-08 16:03:17,027:INFO:              jinja2: 3.1.6
2025-08-08 16:03:17,027:INFO:               scipy: 1.11.4
2025-08-08 16:03:17,027:INFO:              joblib: 1.3.2
2025-08-08 16:03:17,028:INFO:             sklearn: 1.4.2
2025-08-08 16:03:17,028:INFO:                pyod: 2.0.5
2025-08-08 16:03:17,028:INFO:            imblearn: 0.13.0
2025-08-08 16:03:17,028:INFO:   category_encoders: 2.7.0
2025-08-08 16:03:17,028:INFO:            lightgbm: 4.6.0
2025-08-08 16:03:17,028:INFO:               numba: 0.61.2
2025-08-08 16:03:17,028:INFO:            requests: 2.32.4
2025-08-08 16:03:17,028:INFO:          matplotlib: 3.7.5
2025-08-08 16:03:17,028:INFO:          scikitplot: 0.3.7
2025-08-08 16:03:17,028:INFO:         yellowbrick: 1.5
2025-08-08 16:03:17,028:INFO:              plotly: 5.24.1
2025-08-08 16:03:17,028:INFO:    plotly-resampler: Not installed
2025-08-08 16:03:17,028:INFO:             kaleido: 1.0.0
2025-08-08 16:03:17,028:INFO:           schemdraw: 0.15
2025-08-08 16:03:17,029:INFO:         statsmodels: 0.14.5
2025-08-08 16:03:17,029:INFO:              sktime: 0.26.0
2025-08-08 16:03:17,029:INFO:               tbats: 1.1.3
2025-08-08 16:03:17,029:INFO:            pmdarima: 2.0.4
2025-08-08 16:03:17,029:INFO:              psutil: 7.0.0
2025-08-08 16:03:17,029:INFO:          markupsafe: 3.0.2
2025-08-08 16:03:17,029:INFO:             pickle5: Not installed
2025-08-08 16:03:17,029:INFO:         cloudpickle: 3.1.1
2025-08-08 16:03:17,029:INFO:         deprecation: 2.1.0
2025-08-08 16:03:17,029:INFO:              xxhash: 3.5.0
2025-08-08 16:03:17,029:INFO:           wurlitzer: Not installed
2025-08-08 16:03:17,029:INFO:PyCaret optional dependencies:
2025-08-08 16:03:21,923:INFO:                shap: 0.44.1
2025-08-08 16:03:21,923:INFO:           interpret: 0.6.9
2025-08-08 16:03:21,923:INFO:                umap: 0.5.7
2025-08-08 16:03:21,923:INFO:     ydata_profiling: 4.14.0
2025-08-08 16:03:21,923:INFO:  explainerdashboard: 0.4.8
2025-08-08 16:03:21,923:INFO:             autoviz: Not installed
2025-08-08 16:03:21,923:INFO:           fairlearn: 0.7.0
2025-08-08 16:03:21,924:INFO:          deepchecks: Not installed
2025-08-08 16:03:21,924:INFO:             xgboost: Not installed
2025-08-08 16:03:21,924:INFO:            catboost: 1.2.8
2025-08-08 16:03:21,924:INFO:              kmodes: 0.12.2
2025-08-08 16:03:21,924:INFO:             mlxtend: 0.23.4
2025-08-08 16:03:21,924:INFO:       statsforecast: 1.5.0
2025-08-08 16:03:21,924:INFO:        tune_sklearn: Not installed
2025-08-08 16:03:21,924:INFO:                 ray: Not installed
2025-08-08 16:03:21,924:INFO:            hyperopt: 0.2.7
2025-08-08 16:03:21,924:INFO:              optuna: 4.4.0
2025-08-08 16:03:21,924:INFO:               skopt: 0.10.2
2025-08-08 16:03:21,924:INFO:              mlflow: 3.2.0
2025-08-08 16:03:21,924:INFO:              gradio: 5.41.1
2025-08-08 16:03:21,924:INFO:             fastapi: 0.116.1
2025-08-08 16:03:21,924:INFO:             uvicorn: 0.35.0
2025-08-08 16:03:21,924:INFO:              m2cgen: 0.10.0
2025-08-08 16:03:21,924:INFO:           evidently: 0.4.40
2025-08-08 16:03:21,925:INFO:               fugue: 0.8.7
2025-08-08 16:03:21,925:INFO:           streamlit: Not installed
2025-08-08 16:03:21,925:INFO:             prophet: Not installed
2025-08-08 16:03:21,925:INFO:None
2025-08-08 16:03:21,925:INFO:Set up data.
2025-08-08 16:03:21,955:INFO:Set up folding strategy.
2025-08-08 16:03:21,955:INFO:Set up train/test split.
2025-08-08 16:03:21,973:INFO:Set up index.
2025-08-08 16:03:21,974:INFO:Assigning column types.
2025-08-08 16:03:21,978:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-08 16:03:22,043:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,050:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,101:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,199:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,200:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,241:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,241:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,242:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-08 16:03:22,306:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,346:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,347:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,415:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:03:22,457:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,457:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,458:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-08 16:03:22,563:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,564:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:22,669:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:22,671:INFO:Preparing preprocessing pipeline...
2025-08-08 16:03:22,672:INFO:Set up label encoding.
2025-08-08 16:03:22,673:INFO:Set up simple imputation.
2025-08-08 16:03:22,682:INFO:Set up encoding of ordinal features.
2025-08-08 16:03:22,689:INFO:Set up encoding of categorical features.
2025-08-08 16:03:23,156:INFO:Finished creating preprocessing pipeline.
2025-08-08 16:03:23,209:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Benja\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SeniorCitizen', 'tenure',
                                             'MonthlyCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              f...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['customerID', 'TotalCharges'],
                                    transformer=TargetEncoder(cols=['customerID',
                                                                    'TotalCharges'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-08-08 16:03:23,210:INFO:Creating final display dataframe.
2025-08-08 16:03:24,110:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (6043, 21)
5        Transformed data shape        (6043, 42)
6   Transformed train set shape        (4834, 42)
7    Transformed test set shape        (1209, 42)
8              Numeric features                 3
9          Categorical features                17
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              ed1f
2025-08-08 16:03:24,222:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:24,222:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:24,326:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:03:24,326:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:03:24,328:INFO:setup() successfully completed in 8.52s...............
2025-08-08 16:03:24,328:INFO:Initializing compare_models()
2025-08-08 16:03:24,328:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-08 16:03:24,328:INFO:Checking exceptions
2025-08-08 16:03:24,332:INFO:Preparing display monitor
2025-08-08 16:03:24,353:INFO:Initializing Logistic Regression
2025-08-08 16:03:24,354:INFO:Total runtime is 1.6466776529947916e-05 minutes
2025-08-08 16:03:24,357:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:24,357:INFO:Initializing create_model()
2025-08-08 16:03:24,357:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:24,357:INFO:Checking exceptions
2025-08-08 16:03:24,357:INFO:Importing libraries
2025-08-08 16:03:24,357:INFO:Copying training dataset
2025-08-08 16:03:24,365:INFO:Defining folds
2025-08-08 16:03:24,366:INFO:Declaring metric variables
2025-08-08 16:03:24,369:INFO:Importing untrained model
2025-08-08 16:03:24,372:INFO:Logistic Regression Imported successfully
2025-08-08 16:03:24,379:INFO:Starting cross validation
2025-08-08 16:03:24,382:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:30,431:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,439:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,448:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,468:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,474:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,480:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,551:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,598:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,605:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:30,638:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:33,214:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,220:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,226:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,324:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,334:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,343:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,344:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,352:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,357:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,371:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,377:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,384:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,420:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,420:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,427:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,430:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,435:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,439:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,525:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-08 16:03:33,592:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-08 16:03:33,610:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,615:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,621:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,626:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,631:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,636:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,654:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,660:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,665:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,670:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,676:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,681:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:33,697:INFO:Calculating mean and std
2025-08-08 16:03:33,699:INFO:Creating metrics dataframe
2025-08-08 16:03:33,701:INFO:Uploading results into container
2025-08-08 16:03:33,702:INFO:Uploading model into container now
2025-08-08 16:03:33,703:INFO:_master_model_container: 1
2025-08-08 16:03:33,703:INFO:_display_container: 2
2025-08-08 16:03:33,703:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-08 16:03:33,704:INFO:create_model() successfully completed......................................
2025-08-08 16:03:33,870:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:33,870:INFO:Creating metrics dataframe
2025-08-08 16:03:33,877:INFO:Initializing K Neighbors Classifier
2025-08-08 16:03:33,877:INFO:Total runtime is 0.15874730745951335 minutes
2025-08-08 16:03:33,880:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:33,881:INFO:Initializing create_model()
2025-08-08 16:03:33,882:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:33,882:INFO:Checking exceptions
2025-08-08 16:03:33,882:INFO:Importing libraries
2025-08-08 16:03:33,882:INFO:Copying training dataset
2025-08-08 16:03:33,890:INFO:Defining folds
2025-08-08 16:03:33,890:INFO:Declaring metric variables
2025-08-08 16:03:33,894:INFO:Importing untrained model
2025-08-08 16:03:33,897:INFO:K Neighbors Classifier Imported successfully
2025-08-08 16:03:33,903:INFO:Starting cross validation
2025-08-08 16:03:33,907:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:34,666:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,673:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,676:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,681:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,684:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,688:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,693:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,702:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,710:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,725:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,731:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:34,737:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:37,743:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:37,750:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:37,750:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:37,750:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:37,751:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:37,759:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\_distutils_hack\__init__.py:30: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-08 16:03:39,614:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,617:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,617:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,620:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,620:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,621:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,623:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,623:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,625:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,627:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,627:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,628:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,629:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,633:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,633:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,641:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,647:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,653:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:39,666:INFO:Calculating mean and std
2025-08-08 16:03:39,668:INFO:Creating metrics dataframe
2025-08-08 16:03:39,671:INFO:Uploading results into container
2025-08-08 16:03:39,672:INFO:Uploading model into container now
2025-08-08 16:03:39,672:INFO:_master_model_container: 2
2025-08-08 16:03:39,672:INFO:_display_container: 2
2025-08-08 16:03:39,673:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-08 16:03:39,673:INFO:create_model() successfully completed......................................
2025-08-08 16:03:39,892:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:39,892:INFO:Creating metrics dataframe
2025-08-08 16:03:39,901:INFO:Initializing Naive Bayes
2025-08-08 16:03:39,901:INFO:Total runtime is 0.25914144118626914 minutes
2025-08-08 16:03:39,905:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:39,905:INFO:Initializing create_model()
2025-08-08 16:03:39,905:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:39,905:INFO:Checking exceptions
2025-08-08 16:03:39,905:INFO:Importing libraries
2025-08-08 16:03:39,906:INFO:Copying training dataset
2025-08-08 16:03:39,913:INFO:Defining folds
2025-08-08 16:03:39,913:INFO:Declaring metric variables
2025-08-08 16:03:39,917:INFO:Importing untrained model
2025-08-08 16:03:39,920:INFO:Naive Bayes Imported successfully
2025-08-08 16:03:39,926:INFO:Starting cross validation
2025-08-08 16:03:39,930:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:40,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,480:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,483:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,484:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,487:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,489:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,492:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,503:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,508:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,509:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,509:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,511:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,513:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,514:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,517:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,518:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,520:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,522:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,526:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,538:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,544:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,545:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,546:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,547:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,550:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,550:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,553:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,553:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,556:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,556:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,563:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,566:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,569:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,574:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,579:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,581:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:40,583:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:40,594:INFO:Calculating mean and std
2025-08-08 16:03:40,596:INFO:Creating metrics dataframe
2025-08-08 16:03:40,598:INFO:Uploading results into container
2025-08-08 16:03:40,598:INFO:Uploading model into container now
2025-08-08 16:03:40,599:INFO:_master_model_container: 3
2025-08-08 16:03:40,599:INFO:_display_container: 2
2025-08-08 16:03:40,599:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-08 16:03:40,599:INFO:create_model() successfully completed......................................
2025-08-08 16:03:40,747:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:40,747:INFO:Creating metrics dataframe
2025-08-08 16:03:40,755:INFO:Initializing Decision Tree Classifier
2025-08-08 16:03:40,755:INFO:Total runtime is 0.2733664949735006 minutes
2025-08-08 16:03:40,757:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:40,758:INFO:Initializing create_model()
2025-08-08 16:03:40,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:40,758:INFO:Checking exceptions
2025-08-08 16:03:40,758:INFO:Importing libraries
2025-08-08 16:03:40,758:INFO:Copying training dataset
2025-08-08 16:03:40,766:INFO:Defining folds
2025-08-08 16:03:40,767:INFO:Declaring metric variables
2025-08-08 16:03:40,770:INFO:Importing untrained model
2025-08-08 16:03:40,773:INFO:Decision Tree Classifier Imported successfully
2025-08-08 16:03:40,779:INFO:Starting cross validation
2025-08-08 16:03:40,783:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:41,365:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,371:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,374:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,377:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,386:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,396:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,399:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,401:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,405:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,407:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,412:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,418:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,419:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,420:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,425:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,426:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,428:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,431:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,433:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,441:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,447:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,449:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,450:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,453:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,455:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,458:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,459:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,460:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,461:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,465:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,466:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,471:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,472:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,479:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,487:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:41,490:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:41,499:INFO:Calculating mean and std
2025-08-08 16:03:41,501:INFO:Creating metrics dataframe
2025-08-08 16:03:41,503:INFO:Uploading results into container
2025-08-08 16:03:41,504:INFO:Uploading model into container now
2025-08-08 16:03:41,504:INFO:_master_model_container: 4
2025-08-08 16:03:41,504:INFO:_display_container: 2
2025-08-08 16:03:41,505:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-08-08 16:03:41,505:INFO:create_model() successfully completed......................................
2025-08-08 16:03:41,653:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:41,653:INFO:Creating metrics dataframe
2025-08-08 16:03:41,662:INFO:Initializing SVM - Linear Kernel
2025-08-08 16:03:41,662:INFO:Total runtime is 0.2884941458702087 minutes
2025-08-08 16:03:41,666:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:41,666:INFO:Initializing create_model()
2025-08-08 16:03:41,666:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:41,667:INFO:Checking exceptions
2025-08-08 16:03:41,667:INFO:Importing libraries
2025-08-08 16:03:41,667:INFO:Copying training dataset
2025-08-08 16:03:41,678:INFO:Defining folds
2025-08-08 16:03:41,678:INFO:Declaring metric variables
2025-08-08 16:03:41,681:INFO:Importing untrained model
2025-08-08 16:03:41,684:INFO:SVM - Linear Kernel Imported successfully
2025-08-08 16:03:41,690:INFO:Starting cross validation
2025-08-08 16:03:41,695:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:42,279:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,289:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,298:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,335:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,338:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,342:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,342:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,347:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,347:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,348:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,352:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,357:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,362:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,366:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,368:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,371:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,374:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,374:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,376:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,376:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,379:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,381:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,383:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,384:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,386:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,388:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,393:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,397:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,403:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,409:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:42,418:INFO:Calculating mean and std
2025-08-08 16:03:42,420:INFO:Creating metrics dataframe
2025-08-08 16:03:42,422:INFO:Uploading results into container
2025-08-08 16:03:42,422:INFO:Uploading model into container now
2025-08-08 16:03:42,423:INFO:_master_model_container: 5
2025-08-08 16:03:42,423:INFO:_display_container: 2
2025-08-08 16:03:42,423:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-08 16:03:42,424:INFO:create_model() successfully completed......................................
2025-08-08 16:03:42,578:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:42,578:INFO:Creating metrics dataframe
2025-08-08 16:03:42,589:INFO:Initializing Ridge Classifier
2025-08-08 16:03:42,589:INFO:Total runtime is 0.3039363900820414 minutes
2025-08-08 16:03:42,596:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:42,596:INFO:Initializing create_model()
2025-08-08 16:03:42,596:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:42,597:INFO:Checking exceptions
2025-08-08 16:03:42,597:INFO:Importing libraries
2025-08-08 16:03:42,597:INFO:Copying training dataset
2025-08-08 16:03:42,608:INFO:Defining folds
2025-08-08 16:03:42,608:INFO:Declaring metric variables
2025-08-08 16:03:42,611:INFO:Importing untrained model
2025-08-08 16:03:42,614:INFO:Ridge Classifier Imported successfully
2025-08-08 16:03:42,620:INFO:Starting cross validation
2025-08-08 16:03:42,624:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:43,181:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,186:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,189:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,189:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,191:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,195:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,198:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,201:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,206:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,207:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,213:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,215:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,215:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,218:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,220:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,223:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,225:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,229:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,249:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,250:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,254:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,255:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,258:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,260:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,273:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,275:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,278:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,281:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,283:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,286:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:43,300:INFO:Calculating mean and std
2025-08-08 16:03:43,302:INFO:Creating metrics dataframe
2025-08-08 16:03:43,305:INFO:Uploading results into container
2025-08-08 16:03:43,305:INFO:Uploading model into container now
2025-08-08 16:03:43,306:INFO:_master_model_container: 6
2025-08-08 16:03:43,306:INFO:_display_container: 2
2025-08-08 16:03:43,307:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-08-08 16:03:43,307:INFO:create_model() successfully completed......................................
2025-08-08 16:03:43,452:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:43,453:INFO:Creating metrics dataframe
2025-08-08 16:03:43,463:INFO:Initializing Random Forest Classifier
2025-08-08 16:03:43,463:INFO:Total runtime is 0.3185107072194417 minutes
2025-08-08 16:03:43,466:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:43,467:INFO:Initializing create_model()
2025-08-08 16:03:43,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:43,467:INFO:Checking exceptions
2025-08-08 16:03:43,467:INFO:Importing libraries
2025-08-08 16:03:43,467:INFO:Copying training dataset
2025-08-08 16:03:43,476:INFO:Defining folds
2025-08-08 16:03:43,476:INFO:Declaring metric variables
2025-08-08 16:03:43,479:INFO:Importing untrained model
2025-08-08 16:03:43,482:INFO:Random Forest Classifier Imported successfully
2025-08-08 16:03:43,488:INFO:Starting cross validation
2025-08-08 16:03:43,492:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:44,473:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,474:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,481:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,482:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,484:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,489:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,493:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,495:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,498:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,498:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,499:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,502:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,506:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,514:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,514:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,518:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,521:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,525:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,529:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,549:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,554:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,557:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,560:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,596:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,602:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,604:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,606:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,612:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,618:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,621:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:44,623:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:44,638:INFO:Calculating mean and std
2025-08-08 16:03:44,639:INFO:Creating metrics dataframe
2025-08-08 16:03:44,641:INFO:Uploading results into container
2025-08-08 16:03:44,642:INFO:Uploading model into container now
2025-08-08 16:03:44,642:INFO:_master_model_container: 7
2025-08-08 16:03:44,643:INFO:_display_container: 2
2025-08-08 16:03:44,643:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-08-08 16:03:44,643:INFO:create_model() successfully completed......................................
2025-08-08 16:03:44,800:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:44,800:INFO:Creating metrics dataframe
2025-08-08 16:03:44,810:INFO:Initializing Quadratic Discriminant Analysis
2025-08-08 16:03:44,810:INFO:Total runtime is 0.3409535527229309 minutes
2025-08-08 16:03:44,814:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:44,814:INFO:Initializing create_model()
2025-08-08 16:03:44,814:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:44,814:INFO:Checking exceptions
2025-08-08 16:03:44,814:INFO:Importing libraries
2025-08-08 16:03:44,814:INFO:Copying training dataset
2025-08-08 16:03:44,822:INFO:Defining folds
2025-08-08 16:03:44,822:INFO:Declaring metric variables
2025-08-08 16:03:44,826:INFO:Importing untrained model
2025-08-08 16:03:44,829:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-08 16:03:44,835:INFO:Starting cross validation
2025-08-08 16:03:44,839:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:45,307:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,320:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,324:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,332:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,332:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,344:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,353:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,357:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,366:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,376:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:03:45,417:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,423:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,426:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,434:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,437:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,440:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,440:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,448:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,449:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,452:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,452:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,452:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,455:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,456:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,457:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,457:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,460:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,460:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,461:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,461:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,462:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,463:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,463:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,465:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,467:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,472:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,473:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,477:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,483:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,493:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,496:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:45,499:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:45,516:INFO:Calculating mean and std
2025-08-08 16:03:45,518:INFO:Creating metrics dataframe
2025-08-08 16:03:45,520:INFO:Uploading results into container
2025-08-08 16:03:45,521:INFO:Uploading model into container now
2025-08-08 16:03:45,521:INFO:_master_model_container: 8
2025-08-08 16:03:45,521:INFO:_display_container: 2
2025-08-08 16:03:45,522:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-08 16:03:45,522:INFO:create_model() successfully completed......................................
2025-08-08 16:03:45,668:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:45,668:INFO:Creating metrics dataframe
2025-08-08 16:03:45,677:INFO:Initializing Ada Boost Classifier
2025-08-08 16:03:45,677:INFO:Total runtime is 0.3554034153620402 minutes
2025-08-08 16:03:45,681:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:45,681:INFO:Initializing create_model()
2025-08-08 16:03:45,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:45,681:INFO:Checking exceptions
2025-08-08 16:03:45,681:INFO:Importing libraries
2025-08-08 16:03:45,681:INFO:Copying training dataset
2025-08-08 16:03:45,689:INFO:Defining folds
2025-08-08 16:03:45,689:INFO:Declaring metric variables
2025-08-08 16:03:45,693:INFO:Importing untrained model
2025-08-08 16:03:45,696:INFO:Ada Boost Classifier Imported successfully
2025-08-08 16:03:45,702:INFO:Starting cross validation
2025-08-08 16:03:45,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:46,137:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,140:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,159:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,178:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,185:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,191:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,207:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,217:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,245:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,248:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:03:46,250:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,253:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,256:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,266:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,273:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,274:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,275:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,278:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,279:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,281:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,281:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,283:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,284:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,285:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,288:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,302:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,307:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,310:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,313:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,317:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,322:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,325:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,327:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,327:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,331:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,332:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,335:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,335:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,336:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,337:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,339:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,340:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,341:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,342:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,343:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,345:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,348:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,351:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:46,354:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:46,368:INFO:Calculating mean and std
2025-08-08 16:03:46,370:INFO:Creating metrics dataframe
2025-08-08 16:03:46,372:INFO:Uploading results into container
2025-08-08 16:03:46,373:INFO:Uploading model into container now
2025-08-08 16:03:46,373:INFO:_master_model_container: 9
2025-08-08 16:03:46,373:INFO:_display_container: 2
2025-08-08 16:03:46,374:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-08-08 16:03:46,374:INFO:create_model() successfully completed......................................
2025-08-08 16:03:46,520:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:46,520:INFO:Creating metrics dataframe
2025-08-08 16:03:46,530:INFO:Initializing Gradient Boosting Classifier
2025-08-08 16:03:46,530:INFO:Total runtime is 0.36962183316548664 minutes
2025-08-08 16:03:46,534:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:46,534:INFO:Initializing create_model()
2025-08-08 16:03:46,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:46,534:INFO:Checking exceptions
2025-08-08 16:03:46,534:INFO:Importing libraries
2025-08-08 16:03:46,534:INFO:Copying training dataset
2025-08-08 16:03:46,542:INFO:Defining folds
2025-08-08 16:03:46,542:INFO:Declaring metric variables
2025-08-08 16:03:46,545:INFO:Importing untrained model
2025-08-08 16:03:46,549:INFO:Gradient Boosting Classifier Imported successfully
2025-08-08 16:03:46,555:INFO:Starting cross validation
2025-08-08 16:03:46,559:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:47,523:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,528:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,531:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,534:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,548:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,550:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,553:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,555:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,555:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,557:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,560:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,560:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,561:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,561:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,562:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,563:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,565:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,566:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,566:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,567:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,569:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,569:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,569:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,573:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,574:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,577:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,579:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,588:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,592:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,593:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,596:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,597:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,599:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,600:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,602:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,619:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,624:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,627:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:47,630:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:47,648:INFO:Calculating mean and std
2025-08-08 16:03:47,650:INFO:Creating metrics dataframe
2025-08-08 16:03:47,652:INFO:Uploading results into container
2025-08-08 16:03:47,652:INFO:Uploading model into container now
2025-08-08 16:03:47,653:INFO:_master_model_container: 10
2025-08-08 16:03:47,653:INFO:_display_container: 2
2025-08-08 16:03:47,653:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-08 16:03:47,654:INFO:create_model() successfully completed......................................
2025-08-08 16:03:47,802:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:47,802:INFO:Creating metrics dataframe
2025-08-08 16:03:47,812:INFO:Initializing Linear Discriminant Analysis
2025-08-08 16:03:47,812:INFO:Total runtime is 0.39099077781041464 minutes
2025-08-08 16:03:47,816:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:47,817:INFO:Initializing create_model()
2025-08-08 16:03:47,817:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:47,817:INFO:Checking exceptions
2025-08-08 16:03:47,817:INFO:Importing libraries
2025-08-08 16:03:47,817:INFO:Copying training dataset
2025-08-08 16:03:47,825:INFO:Defining folds
2025-08-08 16:03:47,826:INFO:Declaring metric variables
2025-08-08 16:03:47,830:INFO:Importing untrained model
2025-08-08 16:03:47,833:INFO:Linear Discriminant Analysis Imported successfully
2025-08-08 16:03:47,839:INFO:Starting cross validation
2025-08-08 16:03:47,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:48,396:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,401:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,403:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,406:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,407:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,409:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,410:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,414:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,418:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,423:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,425:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,428:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,458:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,459:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,463:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,464:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,466:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,467:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,468:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,470:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,476:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,477:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,482:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,482:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,483:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,486:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,487:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,487:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,487:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,492:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,497:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,502:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,507:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,509:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:48,512:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:48,528:INFO:Calculating mean and std
2025-08-08 16:03:48,530:INFO:Creating metrics dataframe
2025-08-08 16:03:48,532:INFO:Uploading results into container
2025-08-08 16:03:48,533:INFO:Uploading model into container now
2025-08-08 16:03:48,533:INFO:_master_model_container: 11
2025-08-08 16:03:48,534:INFO:_display_container: 2
2025-08-08 16:03:48,534:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-08 16:03:48,534:INFO:create_model() successfully completed......................................
2025-08-08 16:03:48,684:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:48,684:INFO:Creating metrics dataframe
2025-08-08 16:03:48,696:INFO:Initializing Extra Trees Classifier
2025-08-08 16:03:48,696:INFO:Total runtime is 0.4057213068008423 minutes
2025-08-08 16:03:48,703:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:48,704:INFO:Initializing create_model()
2025-08-08 16:03:48,704:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:48,704:INFO:Checking exceptions
2025-08-08 16:03:48,705:INFO:Importing libraries
2025-08-08 16:03:48,705:INFO:Copying training dataset
2025-08-08 16:03:48,714:INFO:Defining folds
2025-08-08 16:03:48,714:INFO:Declaring metric variables
2025-08-08 16:03:48,717:INFO:Importing untrained model
2025-08-08 16:03:48,720:INFO:Extra Trees Classifier Imported successfully
2025-08-08 16:03:48,726:INFO:Starting cross validation
2025-08-08 16:03:48,731:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:49,689:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,689:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,689:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,698:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,699:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,702:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,706:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,706:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,706:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,707:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,708:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,712:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,715:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,719:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,732:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,739:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,744:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,758:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,761:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,763:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,766:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,768:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,769:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,771:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,773:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,779:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,793:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,798:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,801:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:49,803:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:49,816:INFO:Calculating mean and std
2025-08-08 16:03:49,818:INFO:Creating metrics dataframe
2025-08-08 16:03:49,820:INFO:Uploading results into container
2025-08-08 16:03:49,820:INFO:Uploading model into container now
2025-08-08 16:03:49,821:INFO:_master_model_container: 12
2025-08-08 16:03:49,821:INFO:_display_container: 2
2025-08-08 16:03:49,821:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-08-08 16:03:49,822:INFO:create_model() successfully completed......................................
2025-08-08 16:03:49,968:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:49,968:INFO:Creating metrics dataframe
2025-08-08 16:03:49,980:INFO:Initializing Light Gradient Boosting Machine
2025-08-08 16:03:49,980:INFO:Total runtime is 0.4271236022313436 minutes
2025-08-08 16:03:49,984:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:49,985:INFO:Initializing create_model()
2025-08-08 16:03:49,985:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:49,985:INFO:Checking exceptions
2025-08-08 16:03:49,985:INFO:Importing libraries
2025-08-08 16:03:49,985:INFO:Copying training dataset
2025-08-08 16:03:49,992:INFO:Defining folds
2025-08-08 16:03:49,992:INFO:Declaring metric variables
2025-08-08 16:03:49,996:INFO:Importing untrained model
2025-08-08 16:03:50,000:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-08 16:03:50,006:INFO:Starting cross validation
2025-08-08 16:03:50,010:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:50,686:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,694:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,699:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,703:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,765:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,773:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,774:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,778:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,782:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,782:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,787:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,788:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,790:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,791:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,796:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,799:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,800:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,803:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,804:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,807:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,856:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,857:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,860:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,864:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,865:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,866:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,868:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,869:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,869:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,871:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,872:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,873:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,886:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,892:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,896:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,899:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,939:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,945:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,949:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:50,951:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:50,972:INFO:Calculating mean and std
2025-08-08 16:03:50,974:INFO:Creating metrics dataframe
2025-08-08 16:03:50,976:INFO:Uploading results into container
2025-08-08 16:03:50,977:INFO:Uploading model into container now
2025-08-08 16:03:50,978:INFO:_master_model_container: 13
2025-08-08 16:03:50,978:INFO:_display_container: 2
2025-08-08 16:03:50,979:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-08 16:03:50,979:INFO:create_model() successfully completed......................................
2025-08-08 16:03:51,158:INFO:SubProcess create_model() end ==================================
2025-08-08 16:03:51,158:INFO:Creating metrics dataframe
2025-08-08 16:03:51,169:INFO:Initializing CatBoost Classifier
2025-08-08 16:03:51,169:INFO:Total runtime is 0.4469362298647563 minutes
2025-08-08 16:03:51,172:INFO:SubProcess create_model() called ==================================
2025-08-08 16:03:51,173:INFO:Initializing create_model()
2025-08-08 16:03:51,173:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:51,173:INFO:Checking exceptions
2025-08-08 16:03:51,173:INFO:Importing libraries
2025-08-08 16:03:51,173:INFO:Copying training dataset
2025-08-08 16:03:51,181:INFO:Defining folds
2025-08-08 16:03:51,181:INFO:Declaring metric variables
2025-08-08 16:03:51,184:INFO:Importing untrained model
2025-08-08 16:03:51,187:INFO:CatBoost Classifier Imported successfully
2025-08-08 16:03:51,194:INFO:Starting cross validation
2025-08-08 16:03:51,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:03:56,710:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:56,714:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:56,714:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:56,717:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:56,717:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:03:56,719:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:56,719:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:03:56,733:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
2025-08-08 16:03:56,733:WARNING:8 fits failed out of a total of 10.
2025-08-08 16:03:56,733:WARNING:The score on these train-test partitions for these parameters will be set to 0.0.
2025-08-08 16:03:56,733:WARNING:If these failures are not expected, you can try to debug them by setting error_score='raise'.
2025-08-08 16:03:56,733:WARNING:
2025-08-08 16:03:56,733:WARNING:Below are more details about the failures:
2025-08-08 16:03:56,733:WARNING:--------------------------------------------------------------------------------
2025-08-08 16:03:56,733:WARNING:8 fits failed with the following error:
2025-08-08 16:03:56,733:WARNING:Traceback (most recent call last):
2025-08-08 16:03:56,733:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
2025-08-08 16:03:56,733:WARNING:    estimator.fit(X_train, y_train, **fit_params)
2025-08-08 16:03:56,733:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
2025-08-08 16:03:56,733:WARNING:    fitted_estimator = self._memory_fit(
2025-08-08 16:03:56,734:WARNING:                       ^^^^^^^^^^^^^^^^^
2025-08-08 16:03:56,734:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\joblib\memory.py", line 353, in __call__
2025-08-08 16:03:56,734:WARNING:    return self.func(*args, **kwargs)
2025-08-08 16:03:56,734:WARNING:           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-08 16:03:56,734:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
2025-08-08 16:03:56,734:WARNING:    transformer.fit(*args)
2025-08-08 16:03:56,734:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\catboost\core.py", line 5245, in fit
2025-08-08 16:03:56,734:WARNING:    self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline, use_best_model,
2025-08-08 16:03:56,734:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\catboost\core.py", line 2410, in _fit
2025-08-08 16:03:56,734:WARNING:    self._train(
2025-08-08 16:03:56,734:WARNING:  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\catboost\core.py", line 1790, in _train
2025-08-08 16:03:56,734:WARNING:    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
2025-08-08 16:03:56,734:WARNING:  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
2025-08-08 16:03:56,734:WARNING:  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
2025-08-08 16:03:56,734:WARNING:_catboost.CatBoostError: catboost/libs/train_lib/dir_helper.cpp:20: Can't create train working dir: catboost_info
2025-08-08 16:03:56,734:WARNING:
2025-08-08 16:03:56,735:WARNING:  warnings.warn(some_fits_failed_message, FitFailedWarning)
2025-08-08 16:03:56,735:INFO:Calculating mean and std
2025-08-08 16:03:56,736:INFO:Creating metrics dataframe
2025-08-08 16:03:56,739:INFO:Uploading results into container
2025-08-08 16:03:56,739:INFO:Uploading model into container now
2025-08-08 16:03:56,739:INFO:_master_model_container: 14
2025-08-08 16:03:56,740:INFO:_display_container: 2
2025-08-08 16:03:56,740:INFO:<catboost.core.CatBoostClassifier object at 0x000002C31F3CEE10>
2025-08-08 16:03:56,740:INFO:create_model() successfully completed......................................
2025-08-08 16:03:56,892:WARNING:create_model() for <catboost.core.CatBoostClassifier object at 0x000002C31F3CEE10> raised an exception or returned all 0.0, trying without fit_kwargs:
2025-08-08 16:03:56,894:WARNING:Traceback (most recent call last):
  File "c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2025-08-08 16:03:56,895:INFO:Initializing create_model()
2025-08-08 16:03:56,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:03:56,895:INFO:Checking exceptions
2025-08-08 16:03:56,895:INFO:Importing libraries
2025-08-08 16:03:56,895:INFO:Copying training dataset
2025-08-08 16:03:56,903:INFO:Defining folds
2025-08-08 16:03:56,903:INFO:Declaring metric variables
2025-08-08 16:03:56,907:INFO:Importing untrained model
2025-08-08 16:03:56,910:INFO:CatBoost Classifier Imported successfully
2025-08-08 16:03:56,917:INFO:Starting cross validation
2025-08-08 16:03:56,921:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:04:03,550:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:03,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:03,563:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:03,567:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:04,934:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:04,942:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:04,946:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:04,950:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,010:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,017:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,021:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:05,025:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,184:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,191:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,195:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:05,199:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,491:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,499:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,502:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,503:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:05,507:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:05,510:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,614:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,622:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:05,625:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:05,629:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,426:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,433:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,437:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:06,440:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,445:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,452:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,456:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:06,459:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,622:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,627:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,630:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:06,634:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:06,651:INFO:Calculating mean and std
2025-08-08 16:04:06,653:INFO:Creating metrics dataframe
2025-08-08 16:04:06,655:INFO:Uploading results into container
2025-08-08 16:04:06,655:INFO:Uploading model into container now
2025-08-08 16:04:06,656:INFO:_master_model_container: 15
2025-08-08 16:04:06,656:INFO:_display_container: 2
2025-08-08 16:04:06,656:INFO:<catboost.core.CatBoostClassifier object at 0x000002C31F0B3390>
2025-08-08 16:04:06,656:INFO:create_model() successfully completed......................................
2025-08-08 16:04:06,819:INFO:SubProcess create_model() end ==================================
2025-08-08 16:04:06,819:INFO:Creating metrics dataframe
2025-08-08 16:04:06,830:INFO:Initializing Dummy Classifier
2025-08-08 16:04:06,830:INFO:Total runtime is 0.7079592903455099 minutes
2025-08-08 16:04:06,834:INFO:SubProcess create_model() called ==================================
2025-08-08 16:04:06,834:INFO:Initializing create_model()
2025-08-08 16:04:06,834:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C31F23A490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:04:06,834:INFO:Checking exceptions
2025-08-08 16:04:06,834:INFO:Importing libraries
2025-08-08 16:04:06,835:INFO:Copying training dataset
2025-08-08 16:04:06,842:INFO:Defining folds
2025-08-08 16:04:06,842:INFO:Declaring metric variables
2025-08-08 16:04:06,846:INFO:Importing untrained model
2025-08-08 16:04:06,849:INFO:Dummy Classifier Imported successfully
2025-08-08 16:04:06,855:INFO:Starting cross validation
2025-08-08 16:04:06,859:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:04:07,491:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,497:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,498:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,503:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,505:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,506:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,507:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,509:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,511:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,511:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,515:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,516:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,516:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,518:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,518:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,520:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,523:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,527:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,531:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,535:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,536:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,542:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,542:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,545:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,546:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,548:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,548:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,551:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,553:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,554:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,555:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,557:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,562:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,565:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,566:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,568:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,570:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:04:07,572:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:04:07,583:INFO:Calculating mean and std
2025-08-08 16:04:07,585:INFO:Creating metrics dataframe
2025-08-08 16:04:07,587:INFO:Uploading results into container
2025-08-08 16:04:07,588:INFO:Uploading model into container now
2025-08-08 16:04:07,588:INFO:_master_model_container: 16
2025-08-08 16:04:07,588:INFO:_display_container: 2
2025-08-08 16:04:07,589:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-08-08 16:04:07,589:INFO:create_model() successfully completed......................................
2025-08-08 16:04:07,753:INFO:SubProcess create_model() end ==================================
2025-08-08 16:04:07,753:INFO:Creating metrics dataframe
2025-08-08 16:04:07,775:INFO:Initializing create_model()
2025-08-08 16:04:07,775:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:04:07,775:INFO:Checking exceptions
2025-08-08 16:04:07,777:INFO:Importing libraries
2025-08-08 16:04:07,777:INFO:Copying training dataset
2025-08-08 16:04:07,785:INFO:Defining folds
2025-08-08 16:04:07,785:INFO:Declaring metric variables
2025-08-08 16:04:07,785:INFO:Importing untrained model
2025-08-08 16:04:07,785:INFO:Declaring custom model
2025-08-08 16:04:07,785:INFO:K Neighbors Classifier Imported successfully
2025-08-08 16:04:07,789:INFO:Cross validation set to False
2025-08-08 16:04:07,789:INFO:Fitting Model
2025-08-08 16:04:08,050:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-08 16:04:08,051:INFO:create_model() successfully completed......................................
2025-08-08 16:04:08,213:INFO:Initializing create_model()
2025-08-08 16:04:08,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:04:08,214:INFO:Checking exceptions
2025-08-08 16:04:08,215:INFO:Importing libraries
2025-08-08 16:04:08,215:INFO:Copying training dataset
2025-08-08 16:04:08,222:INFO:Defining folds
2025-08-08 16:04:08,222:INFO:Declaring metric variables
2025-08-08 16:04:08,222:INFO:Importing untrained model
2025-08-08 16:04:08,222:INFO:Declaring custom model
2025-08-08 16:04:08,223:INFO:Logistic Regression Imported successfully
2025-08-08 16:04:08,226:INFO:Cross validation set to False
2025-08-08 16:04:08,226:INFO:Fitting Model
2025-08-08 16:04:09,016:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-08 16:04:09,016:INFO:create_model() successfully completed......................................
2025-08-08 16:04:09,172:INFO:Initializing create_model()
2025-08-08 16:04:09,172:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:04:09,172:INFO:Checking exceptions
2025-08-08 16:04:09,174:INFO:Importing libraries
2025-08-08 16:04:09,174:INFO:Copying training dataset
2025-08-08 16:04:09,182:INFO:Defining folds
2025-08-08 16:04:09,182:INFO:Declaring metric variables
2025-08-08 16:04:09,183:INFO:Importing untrained model
2025-08-08 16:04:09,183:INFO:Declaring custom model
2025-08-08 16:04:09,183:INFO:Ridge Classifier Imported successfully
2025-08-08 16:04:09,187:INFO:Cross validation set to False
2025-08-08 16:04:09,187:INFO:Fitting Model
2025-08-08 16:04:09,438:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-08-08 16:04:09,438:INFO:create_model() successfully completed......................................
2025-08-08 16:04:09,610:INFO:_master_model_container: 16
2025-08-08 16:04:09,610:INFO:_display_container: 2
2025-08-08 16:04:09,611:INFO:[KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)]
2025-08-08 16:04:09,611:INFO:compare_models() successfully completed......................................
2025-08-08 16:04:09,733:INFO:Initializing plot_model()
2025-08-08 16:04:09,733:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:04:09,733:INFO:Checking exceptions
2025-08-08 16:04:09,739:INFO:Preloading libraries
2025-08-08 16:04:09,740:INFO:Copying training dataset
2025-08-08 16:04:09,740:INFO:Plot type: confusion_matrix
2025-08-08 16:04:09,981:INFO:Fitting Model
2025-08-08 16:04:09,982:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names
2025-08-08 16:04:09,983:WARNING:  warnings.warn(
2025-08-08 16:04:09,983:INFO:Scoring test/hold-out set
2025-08-08 16:04:10,455:INFO:Visual Rendered Successfully
2025-08-08 16:04:10,602:INFO:plot_model() successfully completed......................................
2025-08-08 16:04:42,846:INFO:Initializing plot_model()
2025-08-08 16:04:42,846:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:04:42,846:INFO:Checking exceptions
2025-08-08 16:08:30,314:INFO:Initializing plot_model()
2025-08-08 16:08:30,315:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:08:30,315:INFO:Checking exceptions
2025-08-08 16:08:30,320:INFO:Preloading libraries
2025-08-08 16:08:30,321:INFO:Copying training dataset
2025-08-08 16:08:30,321:INFO:Plot type: confusion_matrix
2025-08-08 16:08:30,576:INFO:Fitting Model
2025-08-08 16:08:30,577:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
2025-08-08 16:08:30,577:WARNING:  warnings.warn(
2025-08-08 16:08:30,577:INFO:Scoring test/hold-out set
2025-08-08 16:08:30,700:INFO:Visual Rendered Successfully
2025-08-08 16:08:30,862:INFO:plot_model() successfully completed......................................
2025-08-08 16:08:36,233:INFO:Initializing plot_model()
2025-08-08 16:08:36,234:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C319E12050>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:08:36,234:INFO:Checking exceptions
2025-08-08 16:08:36,243:INFO:Preloading libraries
2025-08-08 16:08:36,244:INFO:Copying training dataset
2025-08-08 16:08:36,244:INFO:Plot type: feature
2025-08-08 16:08:36,553:INFO:Visual Rendered Successfully
2025-08-08 16:08:36,723:INFO:plot_model() successfully completed......................................
2025-08-08 16:08:54,130:INFO:PyCaret ClassificationExperiment
2025-08-08 16:08:54,130:INFO:Logging name: clf-default-name
2025-08-08 16:08:54,130:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-08 16:08:54,130:INFO:version 3.3.2
2025-08-08 16:08:54,130:INFO:Initializing setup()
2025-08-08 16:08:54,130:INFO:self.USI: 8569
2025-08-08 16:08:54,130:INFO:self._variable_keys: {'X_train', 'n_jobs_param', 'logging_param', 'pipeline', 'seed', 'html_param', 'fold_shuffle_param', 'X_test', 'fold_groups_param', 'exp_id', 'y', 'y_train', '_ml_usecase', 'fix_imbalance', 'exp_name_log', 'gpu_n_jobs_param', 'X', 'fold_generator', 'is_multiclass', 'idx', 'data', 'log_plots_param', '_available_plots', 'gpu_param', 'target_param', 'memory', 'y_test', 'USI'}
2025-08-08 16:08:54,130:INFO:Checking environment
2025-08-08 16:08:54,131:INFO:python_version: 3.11.13
2025-08-08 16:08:54,131:INFO:python_build: ('main', 'Jul 11 2025 22:36:59')
2025-08-08 16:08:54,131:INFO:machine: AMD64
2025-08-08 16:08:54,131:INFO:platform: Windows-10-10.0.19045-SP0
2025-08-08 16:08:54,139:INFO:Memory: svmem(total=17111728128, available=653008896, percent=96.2, used=16458719232, free=653008896)
2025-08-08 16:08:54,140:INFO:Physical Core: 8
2025-08-08 16:08:54,140:INFO:Logical Core: 16
2025-08-08 16:08:54,140:INFO:Checking libraries
2025-08-08 16:08:54,140:INFO:System:
2025-08-08 16:08:54,140:INFO:    python: 3.11.13 (main, Jul 11 2025, 22:36:59) [MSC v.1944 64 bit (AMD64)]
2025-08-08 16:08:54,140:INFO:executable: c:\Users\Benja\Documents\Projects\techcat\py311\Scripts\python.exe
2025-08-08 16:08:54,140:INFO:   machine: Windows-10-10.0.19045-SP0
2025-08-08 16:08:54,140:INFO:PyCaret required dependencies:
2025-08-08 16:08:54,140:INFO:                 pip: Not installed
2025-08-08 16:08:54,140:INFO:          setuptools: 80.9.0
2025-08-08 16:08:54,140:INFO:             pycaret: 3.3.2
2025-08-08 16:08:54,140:INFO:             IPython: 9.4.0
2025-08-08 16:08:54,140:INFO:          ipywidgets: 8.1.7
2025-08-08 16:08:54,140:INFO:                tqdm: 4.67.1
2025-08-08 16:08:54,140:INFO:               numpy: 1.26.4
2025-08-08 16:08:54,140:INFO:              pandas: 2.1.4
2025-08-08 16:08:54,140:INFO:              jinja2: 3.1.6
2025-08-08 16:08:54,141:INFO:               scipy: 1.11.4
2025-08-08 16:08:54,141:INFO:              joblib: 1.3.2
2025-08-08 16:08:54,141:INFO:             sklearn: 1.4.2
2025-08-08 16:08:54,141:INFO:                pyod: 2.0.5
2025-08-08 16:08:54,141:INFO:            imblearn: 0.13.0
2025-08-08 16:08:54,141:INFO:   category_encoders: 2.7.0
2025-08-08 16:08:54,141:INFO:            lightgbm: 4.6.0
2025-08-08 16:08:54,141:INFO:               numba: 0.61.2
2025-08-08 16:08:54,141:INFO:            requests: 2.32.4
2025-08-08 16:08:54,141:INFO:          matplotlib: 3.7.5
2025-08-08 16:08:54,141:INFO:          scikitplot: 0.3.7
2025-08-08 16:08:54,141:INFO:         yellowbrick: 1.5
2025-08-08 16:08:54,141:INFO:              plotly: 5.24.1
2025-08-08 16:08:54,141:INFO:    plotly-resampler: Not installed
2025-08-08 16:08:54,141:INFO:             kaleido: 1.0.0
2025-08-08 16:08:54,141:INFO:           schemdraw: 0.15
2025-08-08 16:08:54,141:INFO:         statsmodels: 0.14.5
2025-08-08 16:08:54,141:INFO:              sktime: 0.26.0
2025-08-08 16:08:54,141:INFO:               tbats: 1.1.3
2025-08-08 16:08:54,141:INFO:            pmdarima: 2.0.4
2025-08-08 16:08:54,141:INFO:              psutil: 7.0.0
2025-08-08 16:08:54,141:INFO:          markupsafe: 3.0.2
2025-08-08 16:08:54,141:INFO:             pickle5: Not installed
2025-08-08 16:08:54,142:INFO:         cloudpickle: 3.1.1
2025-08-08 16:08:54,142:INFO:         deprecation: 2.1.0
2025-08-08 16:08:54,142:INFO:              xxhash: 3.5.0
2025-08-08 16:08:54,142:INFO:           wurlitzer: Not installed
2025-08-08 16:08:54,142:INFO:PyCaret optional dependencies:
2025-08-08 16:08:54,142:INFO:                shap: 0.44.1
2025-08-08 16:08:54,142:INFO:           interpret: 0.6.9
2025-08-08 16:08:54,142:INFO:                umap: 0.5.7
2025-08-08 16:08:54,142:INFO:     ydata_profiling: 4.14.0
2025-08-08 16:08:54,142:INFO:  explainerdashboard: 0.4.8
2025-08-08 16:08:54,142:INFO:             autoviz: Not installed
2025-08-08 16:08:54,142:INFO:           fairlearn: 0.7.0
2025-08-08 16:08:54,142:INFO:          deepchecks: Not installed
2025-08-08 16:08:54,142:INFO:             xgboost: Not installed
2025-08-08 16:08:54,142:INFO:            catboost: 1.2.8
2025-08-08 16:08:54,142:INFO:              kmodes: 0.12.2
2025-08-08 16:08:54,143:INFO:             mlxtend: 0.23.4
2025-08-08 16:08:54,143:INFO:       statsforecast: 1.5.0
2025-08-08 16:08:54,143:INFO:        tune_sklearn: Not installed
2025-08-08 16:08:54,143:INFO:                 ray: Not installed
2025-08-08 16:08:54,143:INFO:            hyperopt: 0.2.7
2025-08-08 16:08:54,143:INFO:              optuna: 4.4.0
2025-08-08 16:08:54,143:INFO:               skopt: 0.10.2
2025-08-08 16:08:54,143:INFO:              mlflow: 3.2.0
2025-08-08 16:08:54,143:INFO:              gradio: 5.41.1
2025-08-08 16:08:54,143:INFO:             fastapi: 0.116.1
2025-08-08 16:08:54,143:INFO:             uvicorn: 0.35.0
2025-08-08 16:08:54,143:INFO:              m2cgen: 0.10.0
2025-08-08 16:08:54,143:INFO:           evidently: 0.4.40
2025-08-08 16:08:54,143:INFO:               fugue: 0.8.7
2025-08-08 16:08:54,143:INFO:           streamlit: Not installed
2025-08-08 16:08:54,143:INFO:             prophet: Not installed
2025-08-08 16:08:54,143:INFO:None
2025-08-08 16:08:54,144:INFO:Set up data.
2025-08-08 16:08:54,171:INFO:Set up folding strategy.
2025-08-08 16:08:54,171:INFO:Set up train/test split.
2025-08-08 16:08:54,188:INFO:Set up index.
2025-08-08 16:08:54,188:INFO:Assigning column types.
2025-08-08 16:08:54,195:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-08 16:08:54,258:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,259:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,298:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,298:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,360:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,361:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,401:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,401:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,402:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-08 16:08:54,467:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,506:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,571:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-08 16:08:54,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,611:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,612:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-08 16:08:54,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,716:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,821:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:54,821:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:54,823:INFO:Preparing preprocessing pipeline...
2025-08-08 16:08:54,824:INFO:Set up label encoding.
2025-08-08 16:08:54,824:INFO:Set up simple imputation.
2025-08-08 16:08:54,831:INFO:Set up encoding of ordinal features.
2025-08-08 16:08:54,838:INFO:Set up encoding of categorical features.
2025-08-08 16:08:55,271:INFO:Finished creating preprocessing pipeline.
2025-08-08 16:08:55,322:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Benja\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SeniorCitizen', 'tenure',
                                             'MonthlyCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              f...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['customerID', 'TotalCharges'],
                                    transformer=TargetEncoder(cols=['customerID',
                                                                    'TotalCharges'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-08-08 16:08:55,322:INFO:Creating final display dataframe.
2025-08-08 16:08:55,558:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (6043, 21)
5        Transformed data shape        (6043, 42)
6   Transformed train set shape        (4834, 42)
7    Transformed test set shape        (1209, 42)
8              Numeric features                 3
9          Categorical features                17
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              8569
2025-08-08 16:08:55,672:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:55,672:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:55,783:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-08 16:08:55,785:INFO:Soft dependency imported: catboost: 1.2.8
2025-08-08 16:08:55,788:INFO:setup() successfully completed in 1.66s...............
2025-08-08 16:08:55,789:INFO:Initializing compare_models()
2025-08-08 16:08:55,789:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=3, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 3, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-08 16:08:55,789:INFO:Checking exceptions
2025-08-08 16:08:55,793:INFO:Preparing display monitor
2025-08-08 16:08:55,817:INFO:Initializing Logistic Regression
2025-08-08 16:08:55,817:INFO:Total runtime is 0.0 minutes
2025-08-08 16:08:55,820:INFO:SubProcess create_model() called ==================================
2025-08-08 16:08:55,821:INFO:Initializing create_model()
2025-08-08 16:08:55,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:08:55,822:INFO:Checking exceptions
2025-08-08 16:08:55,822:INFO:Importing libraries
2025-08-08 16:08:55,822:INFO:Copying training dataset
2025-08-08 16:08:55,830:INFO:Defining folds
2025-08-08 16:08:55,830:INFO:Declaring metric variables
2025-08-08 16:08:55,834:INFO:Importing untrained model
2025-08-08 16:08:55,837:INFO:Logistic Regression Imported successfully
2025-08-08 16:08:55,842:INFO:Starting cross validation
2025-08-08 16:08:55,847:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:08:56,944:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:56,950:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:56,955:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:56,958:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:56,966:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:56,972:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,088:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,093:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,098:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,100:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,107:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,112:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,155:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-08 16:08:57,159:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,164:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,169:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,179:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-08 16:08:57,226:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,227:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,232:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,232:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,233:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,238:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,242:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,243:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,248:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,257:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,262:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,267:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:57,282:INFO:Calculating mean and std
2025-08-08 16:08:57,284:INFO:Creating metrics dataframe
2025-08-08 16:08:57,286:INFO:Uploading results into container
2025-08-08 16:08:57,287:INFO:Uploading model into container now
2025-08-08 16:08:57,287:INFO:_master_model_container: 1
2025-08-08 16:08:57,287:INFO:_display_container: 2
2025-08-08 16:08:57,288:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-08 16:08:57,288:INFO:create_model() successfully completed......................................
2025-08-08 16:08:57,462:INFO:SubProcess create_model() end ==================================
2025-08-08 16:08:57,463:INFO:Creating metrics dataframe
2025-08-08 16:08:57,470:INFO:Initializing K Neighbors Classifier
2025-08-08 16:08:57,470:INFO:Total runtime is 0.027548356850941976 minutes
2025-08-08 16:08:57,473:INFO:SubProcess create_model() called ==================================
2025-08-08 16:08:57,474:INFO:Initializing create_model()
2025-08-08 16:08:57,474:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:08:57,474:INFO:Checking exceptions
2025-08-08 16:08:57,474:INFO:Importing libraries
2025-08-08 16:08:57,474:INFO:Copying training dataset
2025-08-08 16:08:57,483:INFO:Defining folds
2025-08-08 16:08:57,483:INFO:Declaring metric variables
2025-08-08 16:08:57,487:INFO:Importing untrained model
2025-08-08 16:08:57,490:INFO:K Neighbors Classifier Imported successfully
2025-08-08 16:08:57,496:INFO:Starting cross validation
2025-08-08 16:08:57,501:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:08:58,121:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,127:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,133:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,152:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,156:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,158:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,162:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,163:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,167:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,167:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,168:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,172:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,176:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,178:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,181:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,184:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,189:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,196:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,201:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,205:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,207:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,210:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,213:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,216:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,244:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,249:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,253:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,318:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,323:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,327:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:58,344:INFO:Calculating mean and std
2025-08-08 16:08:58,347:INFO:Creating metrics dataframe
2025-08-08 16:08:58,351:INFO:Uploading results into container
2025-08-08 16:08:58,352:INFO:Uploading model into container now
2025-08-08 16:08:58,353:INFO:_master_model_container: 2
2025-08-08 16:08:58,353:INFO:_display_container: 2
2025-08-08 16:08:58,354:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-08 16:08:58,354:INFO:create_model() successfully completed......................................
2025-08-08 16:08:58,515:INFO:SubProcess create_model() end ==================================
2025-08-08 16:08:58,515:INFO:Creating metrics dataframe
2025-08-08 16:08:58,522:INFO:Initializing Naive Bayes
2025-08-08 16:08:58,522:INFO:Total runtime is 0.04508195320765178 minutes
2025-08-08 16:08:58,526:INFO:SubProcess create_model() called ==================================
2025-08-08 16:08:58,527:INFO:Initializing create_model()
2025-08-08 16:08:58,527:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:08:58,527:INFO:Checking exceptions
2025-08-08 16:08:58,527:INFO:Importing libraries
2025-08-08 16:08:58,527:INFO:Copying training dataset
2025-08-08 16:08:58,536:INFO:Defining folds
2025-08-08 16:08:58,536:INFO:Declaring metric variables
2025-08-08 16:08:58,539:INFO:Importing untrained model
2025-08-08 16:08:58,543:INFO:Naive Bayes Imported successfully
2025-08-08 16:08:58,549:INFO:Starting cross validation
2025-08-08 16:08:58,552:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:08:59,111:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,116:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,119:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,120:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,123:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,123:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,127:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,128:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,129:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,130:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,133:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,133:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,133:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,135:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,136:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,137:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,139:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,139:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,144:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,156:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,158:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,162:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,163:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,165:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,166:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,167:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,168:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,170:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,170:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,172:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,175:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,175:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,178:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,181:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,188:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,192:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,195:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,197:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,215:INFO:Calculating mean and std
2025-08-08 16:08:59,217:INFO:Creating metrics dataframe
2025-08-08 16:08:59,219:INFO:Uploading results into container
2025-08-08 16:08:59,220:INFO:Uploading model into container now
2025-08-08 16:08:59,221:INFO:_master_model_container: 3
2025-08-08 16:08:59,221:INFO:_display_container: 2
2025-08-08 16:08:59,221:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-08 16:08:59,221:INFO:create_model() successfully completed......................................
2025-08-08 16:08:59,383:INFO:SubProcess create_model() end ==================================
2025-08-08 16:08:59,383:INFO:Creating metrics dataframe
2025-08-08 16:08:59,393:INFO:Initializing Decision Tree Classifier
2025-08-08 16:08:59,393:INFO:Total runtime is 0.05958962837855022 minutes
2025-08-08 16:08:59,397:INFO:SubProcess create_model() called ==================================
2025-08-08 16:08:59,397:INFO:Initializing create_model()
2025-08-08 16:08:59,398:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:08:59,398:INFO:Checking exceptions
2025-08-08 16:08:59,398:INFO:Importing libraries
2025-08-08 16:08:59,398:INFO:Copying training dataset
2025-08-08 16:08:59,407:INFO:Defining folds
2025-08-08 16:08:59,407:INFO:Declaring metric variables
2025-08-08 16:08:59,410:INFO:Importing untrained model
2025-08-08 16:08:59,414:INFO:Decision Tree Classifier Imported successfully
2025-08-08 16:08:59,419:INFO:Starting cross validation
2025-08-08 16:08:59,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:08:59,983:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,983:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,991:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,991:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,994:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,994:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:08:59,996:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:08:59,997:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,000:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,002:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,002:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,005:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,010:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,011:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,016:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,018:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,019:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,021:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,025:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,027:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,028:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,029:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,030:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,031:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,031:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,032:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,038:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,044:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,045:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,047:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,049:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,051:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,054:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,057:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,059:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,064:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,066:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:00,069:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,087:INFO:Calculating mean and std
2025-08-08 16:09:00,088:INFO:Creating metrics dataframe
2025-08-08 16:09:00,090:INFO:Uploading results into container
2025-08-08 16:09:00,092:INFO:Uploading model into container now
2025-08-08 16:09:00,092:INFO:_master_model_container: 4
2025-08-08 16:09:00,092:INFO:_display_container: 2
2025-08-08 16:09:00,093:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-08-08 16:09:00,093:INFO:create_model() successfully completed......................................
2025-08-08 16:09:00,255:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:00,255:INFO:Creating metrics dataframe
2025-08-08 16:09:00,263:INFO:Initializing SVM - Linear Kernel
2025-08-08 16:09:00,263:INFO:Total runtime is 0.07409592469533285 minutes
2025-08-08 16:09:00,267:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:00,267:INFO:Initializing create_model()
2025-08-08 16:09:00,267:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:00,267:INFO:Checking exceptions
2025-08-08 16:09:00,268:INFO:Importing libraries
2025-08-08 16:09:00,268:INFO:Copying training dataset
2025-08-08 16:09:00,275:INFO:Defining folds
2025-08-08 16:09:00,275:INFO:Declaring metric variables
2025-08-08 16:09:00,279:INFO:Importing untrained model
2025-08-08 16:09:00,283:INFO:SVM - Linear Kernel Imported successfully
2025-08-08 16:09:00,289:INFO:Starting cross validation
2025-08-08 16:09:00,293:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:00,889:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,895:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,903:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,904:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,910:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,916:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,933:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,938:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,939:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,944:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,945:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,950:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,966:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,971:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,972:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,976:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,977:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,979:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,980:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,983:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,983:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,984:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,985:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,985:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,988:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,989:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,990:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,991:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,993:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:00,994:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,006:INFO:Calculating mean and std
2025-08-08 16:09:01,007:INFO:Creating metrics dataframe
2025-08-08 16:09:01,009:INFO:Uploading results into container
2025-08-08 16:09:01,010:INFO:Uploading model into container now
2025-08-08 16:09:01,010:INFO:_master_model_container: 5
2025-08-08 16:09:01,010:INFO:_display_container: 2
2025-08-08 16:09:01,011:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-08 16:09:01,011:INFO:create_model() successfully completed......................................
2025-08-08 16:09:01,175:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:01,175:INFO:Creating metrics dataframe
2025-08-08 16:09:01,192:INFO:Initializing Ridge Classifier
2025-08-08 16:09:01,192:INFO:Total runtime is 0.08956791559855144 minutes
2025-08-08 16:09:01,195:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:01,196:INFO:Initializing create_model()
2025-08-08 16:09:01,196:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:01,196:INFO:Checking exceptions
2025-08-08 16:09:01,196:INFO:Importing libraries
2025-08-08 16:09:01,196:INFO:Copying training dataset
2025-08-08 16:09:01,203:INFO:Defining folds
2025-08-08 16:09:01,203:INFO:Declaring metric variables
2025-08-08 16:09:01,207:INFO:Importing untrained model
2025-08-08 16:09:01,210:INFO:Ridge Classifier Imported successfully
2025-08-08 16:09:01,216:INFO:Starting cross validation
2025-08-08 16:09:01,220:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:01,755:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,760:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,761:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,766:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,767:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,773:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,805:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,815:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,819:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,822:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,824:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,825:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,829:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,831:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,836:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,841:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,846:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,853:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,866:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,869:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,871:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,875:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,877:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,880:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,949:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,954:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,959:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,962:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,967:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,971:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:01,981:INFO:Calculating mean and std
2025-08-08 16:09:01,982:INFO:Creating metrics dataframe
2025-08-08 16:09:01,984:INFO:Uploading results into container
2025-08-08 16:09:01,985:INFO:Uploading model into container now
2025-08-08 16:09:01,985:INFO:_master_model_container: 6
2025-08-08 16:09:01,986:INFO:_display_container: 2
2025-08-08 16:09:01,986:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-08-08 16:09:01,986:INFO:create_model() successfully completed......................................
2025-08-08 16:09:02,147:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:02,147:INFO:Creating metrics dataframe
2025-08-08 16:09:02,157:INFO:Initializing Random Forest Classifier
2025-08-08 16:09:02,157:INFO:Total runtime is 0.10565696954727175 minutes
2025-08-08 16:09:02,164:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:02,165:INFO:Initializing create_model()
2025-08-08 16:09:02,165:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:02,165:INFO:Checking exceptions
2025-08-08 16:09:02,165:INFO:Importing libraries
2025-08-08 16:09:02,165:INFO:Copying training dataset
2025-08-08 16:09:02,173:INFO:Defining folds
2025-08-08 16:09:02,173:INFO:Declaring metric variables
2025-08-08 16:09:02,176:INFO:Importing untrained model
2025-08-08 16:09:02,180:INFO:Random Forest Classifier Imported successfully
2025-08-08 16:09:02,186:INFO:Starting cross validation
2025-08-08 16:09:02,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:03,156:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,164:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,169:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,173:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,195:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,197:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,203:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,203:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,204:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,206:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,207:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,207:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,210:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,211:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,212:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,213:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,215:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,217:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,219:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,220:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,222:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,230:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,231:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,235:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,238:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,240:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,242:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,260:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,266:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,269:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,272:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,343:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,348:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,352:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,354:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,419:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,424:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,427:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:03,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:03,440:INFO:Calculating mean and std
2025-08-08 16:09:03,442:INFO:Creating metrics dataframe
2025-08-08 16:09:03,443:INFO:Uploading results into container
2025-08-08 16:09:03,444:INFO:Uploading model into container now
2025-08-08 16:09:03,444:INFO:_master_model_container: 7
2025-08-08 16:09:03,445:INFO:_display_container: 2
2025-08-08 16:09:03,445:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-08-08 16:09:03,445:INFO:create_model() successfully completed......................................
2025-08-08 16:09:03,605:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:03,605:INFO:Creating metrics dataframe
2025-08-08 16:09:03,613:INFO:Initializing Quadratic Discriminant Analysis
2025-08-08 16:09:03,613:INFO:Total runtime is 0.1299314300219218 minutes
2025-08-08 16:09:03,616:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:03,617:INFO:Initializing create_model()
2025-08-08 16:09:03,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:03,617:INFO:Checking exceptions
2025-08-08 16:09:03,617:INFO:Importing libraries
2025-08-08 16:09:03,617:INFO:Copying training dataset
2025-08-08 16:09:03,625:INFO:Defining folds
2025-08-08 16:09:03,625:INFO:Declaring metric variables
2025-08-08 16:09:03,629:INFO:Importing untrained model
2025-08-08 16:09:03,633:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-08 16:09:03,639:INFO:Starting cross validation
2025-08-08 16:09:03,642:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:04,096:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,099:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,122:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,125:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,129:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,135:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,162:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,179:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,203:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,208:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,211:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,214:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,216:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,231:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,236:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,238:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,239:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,240:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,241:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,243:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,244:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,246:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,247:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,248:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,250:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,251:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,252:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,254:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,256:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,259:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,265:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,265:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,268:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,269:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,271:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,274:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,297:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,302:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,302:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,305:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,307:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,307:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,309:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,311:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,319:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-08 16:09:04,394:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,399:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,401:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:04,404:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:04,417:INFO:Calculating mean and std
2025-08-08 16:09:04,418:INFO:Creating metrics dataframe
2025-08-08 16:09:04,420:INFO:Uploading results into container
2025-08-08 16:09:04,421:INFO:Uploading model into container now
2025-08-08 16:09:04,421:INFO:_master_model_container: 8
2025-08-08 16:09:04,421:INFO:_display_container: 2
2025-08-08 16:09:04,422:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-08 16:09:04,422:INFO:create_model() successfully completed......................................
2025-08-08 16:09:04,583:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:04,583:INFO:Creating metrics dataframe
2025-08-08 16:09:04,592:INFO:Initializing Ada Boost Classifier
2025-08-08 16:09:04,592:INFO:Total runtime is 0.14624510208765668 minutes
2025-08-08 16:09:04,596:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:04,596:INFO:Initializing create_model()
2025-08-08 16:09:04,597:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:04,597:INFO:Checking exceptions
2025-08-08 16:09:04,597:INFO:Importing libraries
2025-08-08 16:09:04,597:INFO:Copying training dataset
2025-08-08 16:09:04,606:INFO:Defining folds
2025-08-08 16:09:04,606:INFO:Declaring metric variables
2025-08-08 16:09:04,610:INFO:Importing untrained model
2025-08-08 16:09:04,613:INFO:Ada Boost Classifier Imported successfully
2025-08-08 16:09:04,619:INFO:Starting cross validation
2025-08-08 16:09:04,624:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:05,044:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,083:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,095:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,106:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,110:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,126:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,126:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,134:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,143:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,144:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,149:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,152:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,154:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,168:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-08 16:09:05,191:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,196:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,199:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,202:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,203:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,209:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,213:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,216:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,223:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,224:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,229:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,229:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,232:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,233:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,233:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,235:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,236:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,237:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,238:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,241:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,242:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,243:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,245:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,246:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,247:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,252:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,255:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,258:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,260:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,260:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,264:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,265:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,267:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,267:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:05,269:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,270:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:05,286:INFO:Calculating mean and std
2025-08-08 16:09:05,288:INFO:Creating metrics dataframe
2025-08-08 16:09:05,290:INFO:Uploading results into container
2025-08-08 16:09:05,290:INFO:Uploading model into container now
2025-08-08 16:09:05,291:INFO:_master_model_container: 9
2025-08-08 16:09:05,291:INFO:_display_container: 2
2025-08-08 16:09:05,291:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-08-08 16:09:05,291:INFO:create_model() successfully completed......................................
2025-08-08 16:09:05,454:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:05,454:INFO:Creating metrics dataframe
2025-08-08 16:09:05,463:INFO:Initializing Gradient Boosting Classifier
2025-08-08 16:09:05,463:INFO:Total runtime is 0.1607579072316488 minutes
2025-08-08 16:09:05,467:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:05,467:INFO:Initializing create_model()
2025-08-08 16:09:05,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:05,468:INFO:Checking exceptions
2025-08-08 16:09:05,468:INFO:Importing libraries
2025-08-08 16:09:05,468:INFO:Copying training dataset
2025-08-08 16:09:05,475:INFO:Defining folds
2025-08-08 16:09:05,475:INFO:Declaring metric variables
2025-08-08 16:09:05,479:INFO:Importing untrained model
2025-08-08 16:09:05,483:INFO:Gradient Boosting Classifier Imported successfully
2025-08-08 16:09:05,489:INFO:Starting cross validation
2025-08-08 16:09:05,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:06,466:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,467:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,472:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,474:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,478:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,479:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,482:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,488:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,496:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,497:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,499:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,500:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,502:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,503:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,549:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,555:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,558:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,559:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,560:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,564:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,567:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,568:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,570:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,573:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,574:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,575:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,576:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,579:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,579:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,581:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,582:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,583:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,584:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,586:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,602:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,607:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,610:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:06,612:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:06,622:INFO:Calculating mean and std
2025-08-08 16:09:06,624:INFO:Creating metrics dataframe
2025-08-08 16:09:06,626:INFO:Uploading results into container
2025-08-08 16:09:06,627:INFO:Uploading model into container now
2025-08-08 16:09:06,627:INFO:_master_model_container: 10
2025-08-08 16:09:06,627:INFO:_display_container: 2
2025-08-08 16:09:06,627:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-08 16:09:06,628:INFO:create_model() successfully completed......................................
2025-08-08 16:09:06,792:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:06,793:INFO:Creating metrics dataframe
2025-08-08 16:09:06,803:INFO:Initializing Linear Discriminant Analysis
2025-08-08 16:09:06,803:INFO:Total runtime is 0.1830870827039083 minutes
2025-08-08 16:09:06,806:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:06,806:INFO:Initializing create_model()
2025-08-08 16:09:06,806:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:06,806:INFO:Checking exceptions
2025-08-08 16:09:06,806:INFO:Importing libraries
2025-08-08 16:09:06,807:INFO:Copying training dataset
2025-08-08 16:09:06,814:INFO:Defining folds
2025-08-08 16:09:06,814:INFO:Declaring metric variables
2025-08-08 16:09:06,817:INFO:Importing untrained model
2025-08-08 16:09:06,821:INFO:Linear Discriminant Analysis Imported successfully
2025-08-08 16:09:06,826:INFO:Starting cross validation
2025-08-08 16:09:06,830:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:07,397:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,406:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,411:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,415:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,424:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,432:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,435:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,440:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,441:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,445:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,448:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,449:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,450:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,452:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,455:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,457:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,463:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,464:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,465:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,466:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,470:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,472:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,472:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,475:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,484:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,485:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,489:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,489:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,491:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,492:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,492:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,494:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,496:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,499:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:07,501:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:07,518:INFO:Calculating mean and std
2025-08-08 16:09:07,520:INFO:Creating metrics dataframe
2025-08-08 16:09:07,523:INFO:Uploading results into container
2025-08-08 16:09:07,524:INFO:Uploading model into container now
2025-08-08 16:09:07,524:INFO:_master_model_container: 11
2025-08-08 16:09:07,524:INFO:_display_container: 2
2025-08-08 16:09:07,525:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-08 16:09:07,525:INFO:create_model() successfully completed......................................
2025-08-08 16:09:07,690:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:07,691:INFO:Creating metrics dataframe
2025-08-08 16:09:07,702:INFO:Initializing Extra Trees Classifier
2025-08-08 16:09:07,702:INFO:Total runtime is 0.19807792107264202 minutes
2025-08-08 16:09:07,705:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:07,706:INFO:Initializing create_model()
2025-08-08 16:09:07,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:07,706:INFO:Checking exceptions
2025-08-08 16:09:07,706:INFO:Importing libraries
2025-08-08 16:09:07,706:INFO:Copying training dataset
2025-08-08 16:09:07,713:INFO:Defining folds
2025-08-08 16:09:07,713:INFO:Declaring metric variables
2025-08-08 16:09:07,717:INFO:Importing untrained model
2025-08-08 16:09:07,720:INFO:Extra Trees Classifier Imported successfully
2025-08-08 16:09:07,726:INFO:Starting cross validation
2025-08-08 16:09:07,730:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:08,613:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,621:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,630:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,648:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,657:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,670:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,673:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,676:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,680:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,680:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,684:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,686:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,691:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,694:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,697:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,705:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,705:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,710:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,711:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,717:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,787:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,792:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,795:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:08,797:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,833:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,838:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,843:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,878:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,882:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,886:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:08,904:INFO:Calculating mean and std
2025-08-08 16:09:08,906:INFO:Creating metrics dataframe
2025-08-08 16:09:08,908:INFO:Uploading results into container
2025-08-08 16:09:08,908:INFO:Uploading model into container now
2025-08-08 16:09:08,909:INFO:_master_model_container: 12
2025-08-08 16:09:08,909:INFO:_display_container: 2
2025-08-08 16:09:08,910:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-08-08 16:09:08,910:INFO:create_model() successfully completed......................................
2025-08-08 16:09:09,074:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:09,074:INFO:Creating metrics dataframe
2025-08-08 16:09:09,087:INFO:Initializing Light Gradient Boosting Machine
2025-08-08 16:09:09,087:INFO:Total runtime is 0.2211574991544088 minutes
2025-08-08 16:09:09,091:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:09,091:INFO:Initializing create_model()
2025-08-08 16:09:09,091:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:09,091:INFO:Checking exceptions
2025-08-08 16:09:09,091:INFO:Importing libraries
2025-08-08 16:09:09,091:INFO:Copying training dataset
2025-08-08 16:09:09,099:INFO:Defining folds
2025-08-08 16:09:09,099:INFO:Declaring metric variables
2025-08-08 16:09:09,103:INFO:Importing untrained model
2025-08-08 16:09:09,107:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-08 16:09:09,113:INFO:Starting cross validation
2025-08-08 16:09:09,117:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:09,789:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,796:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,801:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,804:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,861:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,869:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,873:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,878:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,905:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,913:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,917:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,921:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,924:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,925:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,932:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,932:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,932:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,936:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,937:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,937:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:09,939:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,942:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:09,942:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,005:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,016:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,020:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:10,024:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,106:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,112:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,114:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,116:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:10,119:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,121:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,124:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:10,127:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,151:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,157:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,160:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:10,164:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:10,182:INFO:Calculating mean and std
2025-08-08 16:09:10,184:INFO:Creating metrics dataframe
2025-08-08 16:09:10,186:INFO:Uploading results into container
2025-08-08 16:09:10,187:INFO:Uploading model into container now
2025-08-08 16:09:10,187:INFO:_master_model_container: 13
2025-08-08 16:09:10,187:INFO:_display_container: 2
2025-08-08 16:09:10,188:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-08 16:09:10,189:INFO:create_model() successfully completed......................................
2025-08-08 16:09:10,375:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:10,375:INFO:Creating metrics dataframe
2025-08-08 16:09:10,385:INFO:Initializing CatBoost Classifier
2025-08-08 16:09:10,386:INFO:Total runtime is 0.24280777772267662 minutes
2025-08-08 16:09:10,389:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:10,389:INFO:Initializing create_model()
2025-08-08 16:09:10,389:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:10,390:INFO:Checking exceptions
2025-08-08 16:09:10,390:INFO:Importing libraries
2025-08-08 16:09:10,390:INFO:Copying training dataset
2025-08-08 16:09:10,399:INFO:Defining folds
2025-08-08 16:09:10,399:INFO:Declaring metric variables
2025-08-08 16:09:10,403:INFO:Importing untrained model
2025-08-08 16:09:10,406:INFO:CatBoost Classifier Imported successfully
2025-08-08 16:09:10,413:INFO:Starting cross validation
2025-08-08 16:09:10,417:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:14,760:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:14,767:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:14,771:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:14,774:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:15,065:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:15,073:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:15,078:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:15,081:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,613:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,622:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,627:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:18,631:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,676:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,684:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:18,688:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:18,691:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,030:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,035:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,038:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,042:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,043:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,047:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,048:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,052:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,252:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,259:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,264:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,267:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,524:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,530:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,532:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,532:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,534:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,534:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,579:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,585:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,587:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:19,590:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:19,601:INFO:Calculating mean and std
2025-08-08 16:09:19,603:INFO:Creating metrics dataframe
2025-08-08 16:09:19,605:INFO:Uploading results into container
2025-08-08 16:09:19,605:INFO:Uploading model into container now
2025-08-08 16:09:19,606:INFO:_master_model_container: 14
2025-08-08 16:09:19,606:INFO:_display_container: 2
2025-08-08 16:09:19,606:INFO:<catboost.core.CatBoostClassifier object at 0x000002C31F235150>
2025-08-08 16:09:19,606:INFO:create_model() successfully completed......................................
2025-08-08 16:09:19,777:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:19,777:INFO:Creating metrics dataframe
2025-08-08 16:09:19,788:INFO:Initializing Dummy Classifier
2025-08-08 16:09:19,789:INFO:Total runtime is 0.3995251695315043 minutes
2025-08-08 16:09:19,792:INFO:SubProcess create_model() called ==================================
2025-08-08 16:09:19,792:INFO:Initializing create_model()
2025-08-08 16:09:19,792:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C333148950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:19,792:INFO:Checking exceptions
2025-08-08 16:09:19,792:INFO:Importing libraries
2025-08-08 16:09:19,793:INFO:Copying training dataset
2025-08-08 16:09:19,800:INFO:Defining folds
2025-08-08 16:09:19,800:INFO:Declaring metric variables
2025-08-08 16:09:19,804:INFO:Importing untrained model
2025-08-08 16:09:19,808:INFO:Dummy Classifier Imported successfully
2025-08-08 16:09:19,813:INFO:Starting cross validation
2025-08-08 16:09:19,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-08 16:09:20,354:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,359:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,362:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,365:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,386:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,394:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,398:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,400:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,401:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,410:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,410:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,412:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,415:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,415:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,418:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,418:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,418:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,421:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,421:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,422:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,424:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,425:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,426:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,429:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,430:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,433:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,434:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,435:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,437:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,440:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,443:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,446:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,464:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,469:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,471:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,473:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,517:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,522:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,525:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-08 16:09:20,527:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-08 16:09:20,543:INFO:Calculating mean and std
2025-08-08 16:09:20,544:INFO:Creating metrics dataframe
2025-08-08 16:09:20,548:INFO:Uploading results into container
2025-08-08 16:09:20,549:INFO:Uploading model into container now
2025-08-08 16:09:20,550:INFO:_master_model_container: 15
2025-08-08 16:09:20,550:INFO:_display_container: 2
2025-08-08 16:09:20,550:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-08-08 16:09:20,550:INFO:create_model() successfully completed......................................
2025-08-08 16:09:20,718:INFO:SubProcess create_model() end ==================================
2025-08-08 16:09:20,718:INFO:Creating metrics dataframe
2025-08-08 16:09:20,739:INFO:Initializing create_model()
2025-08-08 16:09:20,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:20,739:INFO:Checking exceptions
2025-08-08 16:09:20,741:INFO:Importing libraries
2025-08-08 16:09:20,741:INFO:Copying training dataset
2025-08-08 16:09:20,748:INFO:Defining folds
2025-08-08 16:09:20,748:INFO:Declaring metric variables
2025-08-08 16:09:20,748:INFO:Importing untrained model
2025-08-08 16:09:20,748:INFO:Declaring custom model
2025-08-08 16:09:20,749:INFO:K Neighbors Classifier Imported successfully
2025-08-08 16:09:20,753:INFO:Cross validation set to False
2025-08-08 16:09:20,753:INFO:Fitting Model
2025-08-08 16:09:21,000:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-08 16:09:21,000:INFO:create_model() successfully completed......................................
2025-08-08 16:09:21,167:INFO:Initializing create_model()
2025-08-08 16:09:21,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:21,168:INFO:Checking exceptions
2025-08-08 16:09:21,170:INFO:Importing libraries
2025-08-08 16:09:21,170:INFO:Copying training dataset
2025-08-08 16:09:21,178:INFO:Defining folds
2025-08-08 16:09:21,178:INFO:Declaring metric variables
2025-08-08 16:09:21,178:INFO:Importing untrained model
2025-08-08 16:09:21,178:INFO:Declaring custom model
2025-08-08 16:09:21,179:INFO:Logistic Regression Imported successfully
2025-08-08 16:09:21,184:INFO:Cross validation set to False
2025-08-08 16:09:21,184:INFO:Fitting Model
2025-08-08 16:09:21,941:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-08 16:09:21,941:INFO:create_model() successfully completed......................................
2025-08-08 16:09:22,107:INFO:Initializing create_model()
2025-08-08 16:09:22,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-08 16:09:22,108:INFO:Checking exceptions
2025-08-08 16:09:22,111:INFO:Importing libraries
2025-08-08 16:09:22,111:INFO:Copying training dataset
2025-08-08 16:09:22,119:INFO:Defining folds
2025-08-08 16:09:22,119:INFO:Declaring metric variables
2025-08-08 16:09:22,119:INFO:Importing untrained model
2025-08-08 16:09:22,119:INFO:Declaring custom model
2025-08-08 16:09:22,120:INFO:Ridge Classifier Imported successfully
2025-08-08 16:09:22,123:INFO:Cross validation set to False
2025-08-08 16:09:22,123:INFO:Fitting Model
2025-08-08 16:09:22,377:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-08-08 16:09:22,377:INFO:create_model() successfully completed......................................
2025-08-08 16:09:22,565:INFO:_master_model_container: 15
2025-08-08 16:09:22,565:INFO:_display_container: 2
2025-08-08 16:09:22,566:INFO:[KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)]
2025-08-08 16:09:22,566:INFO:compare_models() successfully completed......................................
2025-08-08 16:09:24,624:INFO:Initializing plot_model()
2025-08-08 16:09:24,624:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:09:24,624:INFO:Checking exceptions
2025-08-08 16:09:24,629:INFO:Preloading libraries
2025-08-08 16:09:24,630:INFO:Copying training dataset
2025-08-08 16:09:24,630:INFO:Plot type: confusion_matrix
2025-08-08 16:09:24,871:INFO:Fitting Model
2025-08-08 16:09:24,871:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
2025-08-08 16:09:24,871:WARNING:  warnings.warn(
2025-08-08 16:09:24,872:INFO:Scoring test/hold-out set
2025-08-08 16:09:24,995:INFO:Visual Rendered Successfully
2025-08-08 16:09:25,158:INFO:plot_model() successfully completed......................................
2025-08-08 16:09:27,095:INFO:Initializing plot_model()
2025-08-08 16:09:27,095:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-08 16:09:27,095:INFO:Checking exceptions
2025-08-08 16:09:27,100:INFO:Preloading libraries
2025-08-08 16:09:27,100:INFO:Copying training dataset
2025-08-08 16:09:27,100:INFO:Plot type: feature
2025-08-08 16:09:27,412:INFO:Visual Rendered Successfully
2025-08-08 16:09:27,576:INFO:plot_model() successfully completed......................................
2025-08-08 16:10:43,208:INFO:Initializing predict_model()
2025-08-08 16:10:43,209:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C3332D9120>)
2025-08-08 16:10:43,209:INFO:Checking exceptions
2025-08-08 16:10:43,209:INFO:Preloading libraries
2025-08-08 16:10:43,212:INFO:Set up data.
2025-08-08 16:10:43,228:INFO:Set up index.
2025-08-08 16:10:43,679:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:43,679:WARNING:  warnings.warn(
2025-08-08 16:10:43,689:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:43,689:WARNING:  warnings.warn(
2025-08-08 16:10:43,696:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:43,696:WARNING:  warnings.warn(
2025-08-08 16:10:54,751:INFO:Initializing predict_model()
2025-08-08 16:10:54,751:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C31E858150>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C322CAB740>)
2025-08-08 16:10:54,751:INFO:Checking exceptions
2025-08-08 16:10:54,752:INFO:Preloading libraries
2025-08-08 16:10:54,754:INFO:Set up data.
2025-08-08 16:10:54,766:INFO:Set up index.
2025-08-08 16:10:54,853:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:54,853:WARNING:  warnings.warn(
2025-08-08 16:10:54,859:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:54,860:WARNING:  warnings.warn(
2025-08-08 16:10:54,867:WARNING:c:\Users\Benja\Documents\Projects\techcat\py311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2025-08-08 16:10:54,867:WARNING:  warnings.warn(
